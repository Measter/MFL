// Standard stream descriptor IDs
const STDIN  [u64] is 0 end
const STDOUT [u64] is 1 end
const STDERR [u64] is 2 end

const WRITE [u64] is 1 end

proc puts [u64 ptr(u8)] to [] is
    swap 
    // [ptr int]
    WRITE STDOUT
    // [ptr int int int]
    rot(4>2)
    // [int int ptr int]
    syscall(4)
    drop
end

proc putsln[u64 ptr(u8)] to [] is
    puts "\n" puts
end

proc eputs [u64 ptr(u8)] to [] is
    swap 
    WRITE STDERR rot(4>2)
    syscall(4) drop
end


proc eputsln[u64 ptr(u8)] to [] is
    eputs "\n" eputs
end

proc putud [u64] to [] is
    memory buf is u8[30] end

    // [num]
    if dup 0= do
        drop
        '0' buf 29 ins drop
        29
    else
        30
        // [num idx]
        while over 0!= do
            1- swap // Decrement the idx
            // [idx, num]
            dup 10/
            swap 10% '0'+ cast(u8)
            // [idx, num/10, char]
            buf over(3) ins drop
            swap
        end

        swap drop
    end
    // [idx.start]
    30 over -
    // [idx.start, length]

    swap buf cast(ptr(u8)) + swap
    // [ptr.start, length]

    swap puts
end

proc putudln [u64] to [] is
    putud "\n" puts
end

proc putd [s64] to [] is
    // TODO: Properly handle min value.

    // [num]
    if dup 0(s64)>= do
        cast(u64)
    else
        "-" puts
        0 swap- cast(u64)
    end

    putud
end

proc putdln [s64] to [] is
    putd "\n" puts
end