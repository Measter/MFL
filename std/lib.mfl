module clib
module fs
module io
module mem
module string
module term
module time

proc(track_caller) todo [] to [] {
    here term::ewrite
    ": not yet implemented" term::ewriteln
    1 exit
}

struct SimpleResult {
    errno: u64,
}

struct Result(T, E) {
    tag: Tag,
    data: Payload(T, E),

    enum Tag {
        Ok,
        Err,
    }

    union Payload(T, E) {
        t: T,
        e: E,
    }

    proc Ok(T, E) [T] to [Result(T, E)] {
        Tag::Ok swap Payload(T, E) Result
    }

    proc Err(T, E) [E] to [Result(T, E)] {
        Tag::Err swap Payload(T, E) Result
    }

    proc(track_caller) unwrap_ok(T, E) [Result(T, E)] to [T] {
        unpack swap
        cond {
            Tag::Ok = { xtrd(t) }
            else {
                drop
                "Error: called unwrap on err" lib::term::ewriteln
                exit(1)
            }
        }
    }

    proc(track_caller) unwrap_err(T, E) [Result(T, E)] to [E] {
        unpack swap
        cond {
            Tag::Err = { xtrd(e) }
            else{
                drop
                "Error: called unwrap_err on ok" lib::term::ewriteln
                exit(1)
            }
        }
    }
}