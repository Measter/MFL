union ResultPayload(T E) {
    t T,
    e E,
}

struct Result(T E) {
    is_ok bool,
    data ResultPayload(T, E)
}

proc Ok(T E) [T] to [Result(T, E)] {
    true swap ResultPayload(T, E) Result
}

proc Err(T E) [E] to [Result(T, E)] {
    false swap ResultPayload(T, E) Result
}

proc unwrap_ok(T E) [Result(T, E)] to [T] {
    unpack swap
    if {
        xtrd(t)
    } else {
        drop
        "Error: called unwrap on err" std::term::ewriteln
        exit
    }
}

proc unwrap_err(T E) [Result(T, E)] to [E] {
    unpack swap
    if not {
        xtrd(e)
    } else {
        drop
        "Error: called unwrap_err on ok" std::term::ewriteln
        exit
    }
}