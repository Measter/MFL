import core::String

const WRITE [u64] { 0x01 }

struct FD { 
    field fd u64
}

struct WriteResult {
    field written u64
    field errno u64
}

proc write [FD String] to [WriteResult] {
    // [fd string]
    WRITE
    // [fd string sysid]
    rot(3<1)
    unpack
    rot(3<1)
    // [sysid fd string]
    unpack swap
    syscall(4)
    if dup 0>= {
        0
    } else {
        0- 0 swap
    }
    pack(WriteResult)
}

proc writeln [FD String] to [WriteResult] {
    over swap write
    if xtr(errno) 0= { drop "\n" write }
    else { swap drop }
}

proc write_ui [FD u64] to [WriteResult] {
    memory buf { u8[30] }

    // [num]
    if dup 0= {
        drop
        '0' buf 29 ins drop
        29
    } else {
        30
        // [num idx]
        while over 0!= {
            1- swap // Decrement the idx
            // [idx, num]
            dup 10/
            swap 10% '0'+ cast(u8)
            // [idx, num/10, char]
            buf over(3) ins drop
            swap
        }

        swap drop
    }
    // [idx.start]
    30 over -
    // [idx.start, length]

    swap buf cast(u8&) +
    
    pack(String) write
}

proc write_ui_ln [FD u64] to [WriteResult] {
    over swap write_ui
    if xtr(errno) 0= { drop "\n" write }
    else { swap drop }
}

proc write_si [FD s64] to [WriteResult] {
    // TODO: Properly handle min value.

    // [num]
    if dup 0(s64)>= {
        cast(u64)
    } else {
        over "-" write
        if xtr(errno) 0!= { rot(3>1) drop(2) return } else { drop }
        0 swap- cast(u64)
    }

    write_ui
}

proc write_si_ln [FD s64] to [WriteResult] {
    over swap write_si
    if xtr(errno) 0= { drop "\n" write }
    else { swap drop }
}