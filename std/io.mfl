const WRITE [u64] is 0x01 end

struct FD is
    field fd u64
end

struct WriteResult is
    field written u64
    field errno u64
end

proc write [FD String] to [WriteResult] is
    // [fd string]
    WRITE
    // [fd string sysid]
    rot(3<1)
    unpack
    rot(3<1)
    // [sysid fd string]
    unpack swap
    syscall(4)
    if dup 0>= do
        0
    else
        0- 0 swap
    end
    pack(WriteResult)
end

proc writeln [FD String] to [WriteResult] is
    over swap write
    if xtr(errno) 0= do drop "\n" write 
    else swap drop end
end

proc write_ui [FD u64] to [WriteResult] is
    memory buf is u8[30] end

    // [num]
    if dup 0= do
        drop
        '0' buf 29 ins drop
        29
    else
        30
        // [num idx]
        while over 0!= do
            1- swap // Decrement the idx
            // [idx, num]
            dup 10/
            swap 10% '0'+ cast(u8)
            // [idx, num/10, char]
            buf over(3) ins drop
            swap
        end

        swap drop
    end
    // [idx.start]
    30 over -
    // [idx.start, length]

    swap buf cast(ptr(u8)) +
    
    pack(String) write
end

proc write_ui_ln [FD u64] to [WriteResult] is
    over swap write_ui
    if xtr(errno) 0= do drop "\n" write 
    else swap drop end
end

proc write_si [FD s64] to [WriteResult] is
    // TODO: Properly handle min value.

    // [num]
    if dup 0(s64)>= do
        cast(u64)
    else
        over "-" write
        if xtr(errno) 0!= do rot(3>1) drop(2) return else drop end
        0 swap- cast(u64)
    end

    write_ui
end

proc write_si_ln [FD s64] to [WriteResult] is
    over swap write_si
    if xtr(errno) 0= do drop "\n" write 
    else swap drop end
end