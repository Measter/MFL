import core::String

const WRITE [u64] { 0x01 }

struct FD { 
    fd u64,
}

struct WriteResult {
    written u64,
    errno u64,
}

proc write [FD, String] to [WriteResult] {
    // [fd string]
    WRITE
    // [fd string sysid]
    rot(3<1)
    unpack
    rot(3<1)
    // [sysid fd string]
    unpack swap
    syscall(4)
    cond {
        dup 0>= { 0 }
        else { 0- 0 swap }
    }
    WriteResult
}

proc writeln [FD, String] to [WriteResult] {
    over swap write
    cond {
        xtrd(errno) 0= { "\n" write }
        else { swap drop }
    }
}

proc write_ui [FD, u64] to [WriteResult] {
    var buf u8[30]

    // [num]
    cond {
        0= {
            '0' 29 buf#!
            29
        }
        else {
            30
            // [num idx]
            while over 0!= {
                1- swap // Decrement the idx
                // [idx, num]
                dup 10/
                swap 10% '0'+ cast(u8)
                // [idx, num/10, char]
                over(2) buf#!
                swap
            }

            swap drop
        }
    }
    // [idx.start]
    30 over -
    // [idx.start, length]

    swap buf cast(u8*) +
    
    String write
}

proc write_ui_ln [FD, u64] to [WriteResult] {
    over swap write_ui
    cond {
        xtrd(errno) 0= { "\n" write }
        else { swap drop }
    }
}

proc write_si [FD, s64] to [WriteResult] {
    // TODO: Properly handle min value.

    // [num]
    cond {
        dup 0>= { cast(u64) }
        else {
            over "-" write
            cond {
                xtr(errno) 0!= { rot(3>1) drop(2) return }
                else { drop }
            }
            0 swap- cast(u64)
        }
    }

    write_ui
}

proc write_si_ln [FD, s64] to [WriteResult] {
    over swap write_si
    cond {
        xtrd(errno) 0= { "\n" write }
        else { swap drop }
    }
}

proc write_bool [FD, bool] to [WriteResult] {
    cond {
        { "true" }
        else { drop "false" }
    }
    write
}

proc write_bool_ln [FD, bool] to [WriteResult] {
    over swap write_bool
    cond {
        xtrd(errno) 0= { "\n" write }
        else { swap drop }
    }
}