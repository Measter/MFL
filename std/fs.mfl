import lib::clib
import lib::mem::Slice
import lib::Result
import lib::SimpleResult


struct File {
    fd: clib::FD,
    flags: u32, // Used to store the flags the file was opened with.

    // Opens a file in read-only mode.
    proc open_read [var filename: String] to [Result(File, clib::ErrNo)] {
        cond {
            filename.length@ 1- filename#@ 0 !={
                "Filename `" lib::term::ewrite
                filename@ lib::term::ewrite
                "` must be null-terminated" lib::term::ewriteln
                1 exit
            }
        }
        clib::O_READONLY
        filename.pointer@
        over
        0o666
        clib::open64
        cond {
            -1 = {
                drop // Drop flags
                clib::get_errno clib::ErrNo::from_int
                Result::Err(File, clib::ErrNo)
            }
            else {
                cast(u32) clib::FD swap File Result::Ok(File, clib::ErrNo)
            }
        }
    }

    // Opens a file in read-write mode, creating the file if it doesn't exist.
    proc open_write [var filename: String] to [Result(File, clib::ErrNo)] {
        cond {
            filename.length@ 1- filename#@ 0 !={
                "Filename `" lib::term::ewrite
                filename@ lib::term::ewrite
                "` must be null-terminated" lib::term::ewriteln
                1 exit
            }
        }
        clib::O_READWRITE clib::O_CREATE or
        filename.pointer@
        over
        0o666
        clib::open64
        cond {
            -1 = {
                drop // Drop flags
                clib::get_errno clib::ErrNo::from_int
                Result::Err(File, clib::ErrNo)
            }
            else {
                cast(u32) clib::FD swap File Result::Ok(File, clib::ErrNo)
            }
        }
    }

    // Opens a file in read-write mode, creating the file if it doesn't exist,
    // and truncating the file.
    proc create_new [var filename: String] to [Result(File, clib::ErrNo)] {
        cond {
            filename.length@ 1- filename#@ 0 !={
                "Filename `" lib::term::ewrite
                filename@ lib::term::ewrite
                "` must be null-terminated" lib::term::ewriteln
                1 exit
            }
        }
        clib::O_READWRITE clib::O_CREATE clib::O_TRUNC or or
        filename.pointer@
        over
        0o666
        clib::open64
        cond {
            -1 = {
                drop // Drop flags
                clib::get_errno clib::ErrNo::from_int
                Result::Err(File, clib::ErrNo)
            }
            else {
                cast(u32) clib::FD swap File Result::Ok(File, clib::ErrNo)
            }
        }
    }

    proc close [File] to [Result(bool, clib::ErrNo)] {
        xtrd(fd) unpack clib::close
        cond {
            -1 = {
                clib::get_errno clib::ErrNo::from_int
                Result::Err(bool, clib::ErrNo)
            }
            else {
                drop
                true Result::Ok(bool, clib::ErrNo)
            }
        }
    }
    
    proc stat [File] to [Result(clib::Stat, clib::ErrNo)] {
        var buf: clib::Stat
        xtrd(fd) unpack buf clib::fstat
        cond {
            -1 = {
                clib::get_errno clib::ErrNo::from_int
                Result::Err(clib::Stat, clib::ErrNo)
            }
            else {
                drop
                buf@ Result::Ok(clib::Stat, clib::ErrNo)
            }
        }
    }

}

struct MMap {
    pointer: u8*,
    length: u64,

    proc map_file [var file: File] to [Result(MMap, clib::ErrNo)] {
        file@:stat cond {
            dup :is_err {
                :unwrap_err Result::Err(MMap, clib::ErrNo) return
            }
            else { :unwrap_ok }
        }

        xtrd(st_size) // Length.
        dup
        0(u64) cast(u8*) swap // Address. We don't care where it goes.
        // Prot flags, based on how file was opened.
        cond {
            file.flags@ clib::O_READONLY = { clib::PROT_READ }
            file.flags@ clib::O_READWRITE and 0 != { clib::PROT_READ clib::PROT_WRITE or }
            else {
                // We only create files with readonly or read-write permission.
                "Error: Invalid file flags: " lib::term::ewrite
                file.flags@ lib::term::ewrite_ui_ln
                exit(1)
            }
        }

        // I think we can assume shared?
        clib::MAP_SHARED
        file.fd@ unpack // FD
        0 // Offset
        clib::mmap64

        cond {
            -1(s64) cast(u64) cast(u8*) = {
                drop // Length
                clib::get_errno clib::ErrNo::from_int
                Result::Err(MMap, clib::ErrNo)
            }
            else {
                swap MMap Result::Ok(MMap, clib::ErrNo)
            }
        }
    }

    proc as_slice [MMap] to [Slice(u8)] {
        unpack Slice
    }

    proc unmap [MMap] to [Result(u8, clib::ErrNo)] {
        unpack clib::munmap cond {
            -1 = {
                clib::get_errno clib::ErrNo::from_int
                Result::Err(u8, clib::ErrNo)
            }
            else {
                drop
                0 Result::Ok(u8, clib::ErrNo)
            }
        }
    }
}
