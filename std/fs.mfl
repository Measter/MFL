import lib::clib
import lib::ErrNo
import lib::Result
import lib::SimpleResult


struct File {
    fd: clib::FD,

    // Opens a file in read-only mode.
    proc open_read [var filename: String] to [Result(File, ErrNo)] {
        cond {
            filename.length@ 1- filename#@ 0 !={
                "Filename `" lib::term::ewrite
                filename@ lib::term::ewrite
                "` must be null-terminated" lib::term::ewriteln
                1 exit
            }
        }
        filename.pointer@
        clib::O_READONLY
        0o666
        clib::open64
        cond {
            -1 = {
                clib::get_errno ErrNo::from_int
                Result::Err(File, ErrNo)
            }
            else {
                cast(u32) clib::FD File Result::Ok(File, ErrNo)
            }
        }
    }

    // Opens a file in read-write mode, creating the file if it doesn't exist.
    proc open_write [var filename: String] to [Result(File, ErrNo)] {
        cond {
            filename.length@ 1- filename#@ 0 !={
                "Filename `" lib::term::ewrite
                filename@ lib::term::ewrite
                "` must be null-terminated" lib::term::ewriteln
                1 exit
            }
        }
        filename.pointer@
        clib::O_READWRITE clib::O_CREATE or
        0o666
        clib::open64
        cond {
            -1 = {
                clib::get_errno ErrNo::from_int
                Result::Err(File, ErrNo)
            }
            else {
                cast(u32) clib::FD File Result::Ok(File, ErrNo)
            }
        }
    }

    // Opens a file in read-write mode, creating the file if it doesn't exist,
    // and truncating the file.
    proc create_new [var filename: String] to [Result(File, ErrNo)] {
        cond {
            filename.length@ 1- filename#@ 0 !={
                "Filename `" lib::term::ewrite
                filename@ lib::term::ewrite
                "` must be null-terminated" lib::term::ewriteln
                1 exit
            }
        }
        filename.pointer@
        clib::O_READWRITE clib::O_CREATE clib::O_TRUNC or or
        0o666
        clib::open64
        cond {
            -1 = {
                clib::get_errno ErrNo::from_int
                Result::Err(File, ErrNo)
            }
            else {
                cast(u32) clib::FD File Result::Ok(File, ErrNo)
            }
        }
    }

    proc close [File] to [Result(bool, ErrNo)] {
        unpack unpack clib::close
        cond {
            -1 = {
                clib::get_errno ErrNo::from_int
                Result::Err(bool, ErrNo)
            }
            else {
                drop
                true Result::Ok(bool, ErrNo)
            }
        }
    }
    
    proc stat [File] to [Result(clib::Stat, ErrNo)] {
        var buf: clib::Stat
        unpack unpack buf clib::fstat
        cond {
            -1 = {
                clib::get_errno ErrNo::from_int
                Result::Err(clib::Stat, ErrNo)
            }
            else {
                drop
                buf@ Result::Ok(clib::Stat, ErrNo)
            }
        }
    }
}
