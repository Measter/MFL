import std::Result
import std::ErrNo
import std::SimpleResult

const PROT_READ [u64] { 0x01 }
const PROT_WRITE [u64] { 0x02 }
const MAP_ANONYMOUS [u64] { 0x20 }
const MAP_PRIVATE [u64] { 0x02 }

const SYS_MMAP [u64] { 0x09 }
const SYS_MUNMAP [u64] { 0x0B }

module c {
    proc(extern) malloc [u64] to [u8*]
    proc(extern) free [u8*] to []
    proc(extern) get_errno [] to [s32]
}

struct MMap(T) {
    pointer T*,
    length u64,
}

proc(lang(alloc)) alloc(T) [
    u64 // Number of Ts to allocate for
] to [Result(MMap(T), ErrNo)] {
    dup sizeof(T) * // We need the number of bytes to allocate, not the number of Ts.
    c::malloc

    cond {
        isnull {
            drop c::get_errno ErrNo::from_int
            Result::Err(MMap(T), ErrNo)
            return
        }
        else { cast(T*) swap MMap Result::Ok(MMap(T), ErrNo) return }
    }
}

proc(lang(free)) free(T) [MMap(T)] to [] {
    xtrd(pointer) cast(u8*) c::free
}

proc fill(T) [
    var store MMap(T),
    var val T
] to [] {
    0 while dup store.length@ < {
        val@ store over(2) insd
        1+
    } drop
}

proc copy(T) [
    var src MMap(T),
    var dst MMap(T),
] to [] {
    cond {
        src.length@ dst.length@ != {
            "Mismatched length in copy - src: " std::term::ewrite
            src.length@ std::term::ewrite_ui
            " dst: " std::term::ewrite
            dst.length@ std::term::ewrite_ui_ln
            exit(1)
        }
    }

    0 while dup dst.length@ < {
        dup src swap xtrd
        over dst swap insd
        1+
    } drop
}

proc mmap_file [
    std::io::FD,
    u64 // Protection flags. Must match the FD.
] to [Result(MMap(u8), u64)] {
    over std::fs::fstat
    cond {
        xtr(tag) Result::Tag::Err = {
            rot(3>1) drop(2)
            Result::unwrap_err
            Result::Err(MMap(u8), u64)
            return
        }
    }
    Result::unwrap_ok

    xtrd(st_size) 0
    // [FD PROT length addr]
    rev(4)
    //[addr length Prot FD]
    unpack
    MAP_PRIVATE swap 0
    SYS_MMAP rot(7>1)
    // We want to keep the length
    over(4)
    rot(8>1)
    syscall(7)

    dup cast(s64)
    // [length ptr errcode]

    cond {
        dup 0< {
            // Some kind of failure
            0 swap - cast(u64)
            // Drop the len and pointer
            rev(3) drop(2)
            Result::Err(MMap(u8), u64)
        }
        else {
            drop cast(u8*) swap MMap Result::Ok(MMap(u8), u64)
        }
    }
}

