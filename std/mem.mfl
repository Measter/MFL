import std::Result
import std::SimpleResult

const PROT_READ [u64] is 0x01 end
const PROT_WRITE [u64] is 0x02 end
const MAP_ANONYMOUS [u64] is 0x20 end
const MAP_PRIVATE [u64] is 0x02 end

const SYS_MMAP [u64] is 0x09 end
const SYS_MUNMAP [u64] is 0x0B end

struct MMap(T) is
    field pointer T&
    field length u64
end

proc alloc(T) [
    u64 // Number of Ts to allocate for
] to [Result(MMap(T))] is
    dup

    sizeof(T) * // We need the number of bytes to allocate, not the number of Ts.
    SYS_MMAP 0 rot(3<1)
    PROT_READ PROT_WRITE or
    MAP_ANONYMOUS MAP_PRIVATE or
    0 // File descriptor
    0 // File offset
    syscall(7)
    dup cast(s64)
    // [len ptr errcode]

    if dup 0< do
        // Some kind of failure
        0 swap - cast(u64)
        // Drop the len and pointer
        rot(3>1) drop(2)
        // Store a null pointer and 0 length.
        0(u64) cast(T&) 0
        pack(MMap)
        pack(Result) return
    end
    drop 0
    // [len ptr errcode]
    rev(3)
    swap cast(T&) swap
    pack(MMap)
    pack(Result)
end

proc free(T) [MMap(T)] to [SimpleResult] is
    unpack
    // [ptr len]
    sizeof(T) *
    SYS_MUNMAP rot(3>1) syscall(3)
    cast(s64) 0 swap - cast(u64)
    pack(SimpleResult)
end

proc fill(T) [
    MMap(T)
    T
] to [] is
    memory val is T end
    memory store is MMap(T) end
    val!
    store!

    0 while dup store xtrd(length) < do
        val@ store over(2) insd
        1+
    end drop
end

proc copy(T) [
    MMap(T) // Source
    MMap(T) // Destination
] to [] is
    if xtr(length) over(2) xtrd(length) != do
        "Mismatched length in copy - src: " std::term::ewrite
        swap xtrd(length) std::term::ewrite_ui
        " dst: " std::term::ewrite
        xtrd(length) std::term::ewrite_ui_ln
        exit
    end

    memory src is MMap(T) end
    memory dst is MMap(T) end
    dst! src!

    0 while dup dst xtrd(length) < do
        dup src swap xtrd
        over dst swap insd
        1+
    end drop
end

proc mmap_file [
    std::io::FD
    u64 // Protection flags. Must match the FD.
] to [Result(MMap(u8))] is
    over std::fs::fstat
    if xtr(errno) 0!= do
        rot(3>1) drop(2)
        xtrd(errno)
        0(u64) cast(u8&) // Null pointer
        0                    // length
        pack(MMap)
        pack(Result) return
    end
    xtrd(data)

    xtrd(st_size) 0
    // [FD PROT length addr]
    rev(4)
    //[addr length Prot FD]
    unpack
    MAP_PRIVATE swap 0
    SYS_MMAP rot(7>1)
    // We want to keep the length
    over(4)
    rot(8>1)
    syscall(7)

    dup cast(s64)
    // [length ptr errcode]

    if dup 0< do
        // Some kind of failure
        0 swap - cast(u64)
        // Drop the len and pointer
        rev(3) drop(2)
        // Store a null pointer.
        0(u64) cast(u8&)
        // And a 0 length
        0
        pack(MMap)
    else
        drop cast(u8&) swap pack(MMap) 0 swap
    end

    pack(Result) return
end

