import lib::Result
import lib::ErrNo
import lib::SimpleResult

const PROT_READ [u64] { 0x01 }
const PROT_WRITE [u64] { 0x02 }
const MAP_ANONYMOUS [u64] { 0x20 }
const MAP_PRIVATE [u64] { 0x02 }

const SYS_MMAP [u64] { 0x09 }
const SYS_MUNMAP [u64] { 0x0B }

module c {
    proc(extern) malloc [u64] to [u8*]
    proc(extern) free [u8*] to []
    proc(extern) get_errno [] to [s32]
}

struct Slice(T) {
    pointer: T*,
    length: u64,

    proc fill(T) [
        var val: T,
        var this: Slice(T),
    ] to [] {
        0 while dup this.length@ < {
            val@ over this#!
            1+
        } drop
    }

    proc(track_caller) copy_from(T) [
        var src: Slice(T),
        var this: Slice(T),
    ] to [] {
        cond {
            src.length@ this.length@ != {
                "Mismatched length in copy_from - src: " lib::term::ewrite
                src.length@ lib::term::ewrite_ui
                " dst: " lib::term::ewrite
                this.length@ lib::term::ewrite_ui_ln
                exit(1)
            }
        }

        0 while dup this.length@ < {
            dup src#@
            over this#!
            1+
        } drop
    }
}

struct OwnedSlice(T) {
    pointer: T*,
    length: u64,

    proc to_slice(T) [OwnedSlice(T)] to [Slice(T)] {
        unpack Slice
    }
}

proc(lang(alloc)) alloc(T) [
    u64 // Number of Ts to allocate for
] to [Result(OwnedSlice(T), ErrNo)] {
    dup sizeof(T) * // We need the number of bytes to allocate, not the number of Ts.
    c::malloc

    cond {
        isnull {
            drop c::get_errno ErrNo::from_int
            Result::Err(OwnedSlice(T), ErrNo)
        }
        else {
            cast(T*) swap OwnedSlice
            Result::Ok(OwnedSlice(T), ErrNo)
        }
    }
}

proc(lang(free)) free(T) [OwnedSlice(T)] to [] {
    xtrd(pointer) cast(u8*) c::free
}

proc mmap_file [
    lib::io::FD,
    u64 // Protection flags. Must match the FD.
] to [Result(MMap(u8), u64)] {
    over lib::fs::fstat
    cond {
        xtr(tag) Result::Tag::Err = {
            rot(3>1) drop(2)
            :unwrap_err
            Result::Err(MMap(u8), u64)
            return
        }
    }
    :unwrap_ok

    xtrd(st_size) 0
    // [FD PROT length addr]
    rev(4)
    //[addr length Prot FD]
    unpack
    MAP_PRIVATE swap 0
    SYS_MMAP rot(7>1)
    // We want to keep the length
    over(4)
    rot(8>1)
    syscall(7)

    dup cast(s64)
    // [length ptr errcode]

    cond {
        dup 0< {
            // Some kind of failure
            0 swap - cast(u64)
            // Drop the len and pointer
            rev(3) drop(2)
            Result::Err(MMap(u8), u64)
        }
        else {
            drop cast(u8*) swap MMap Result::Ok(MMap(u8), u64)
        }
    }
}

