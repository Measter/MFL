import std::result
import std::result::Result
import std::SimpleResult

const PROT_READ [u64] { 0x01 }
const PROT_WRITE [u64] { 0x02 }
const MAP_ANONYMOUS [u64] { 0x20 }
const MAP_PRIVATE [u64] { 0x02 }

const SYS_MMAP [u64] { 0x09 }
const SYS_MUNMAP [u64] { 0x0B }

struct MMap(T) {
    pointer T*,
    length u64,
}

proc(lang(alloc)) alloc(T) [
    u64 // Number of Ts to allocate for
] to [Result(MMap(T) u64)] {
    dup

    sizeof(T) * // We need the number of bytes to allocate, not the number of Ts.
    SYS_MMAP 0 rot(3<1)
    PROT_READ PROT_WRITE or
    MAP_ANONYMOUS MAP_PRIVATE or
    0 // File descriptor
    0 // File offset
    syscall(7)
    dup cast(s64)
    // [len ptr errcode]

    if dup 0< {
        // Some kind of failure
        0 swap - cast(u64)
        // Drop the len and pointer
        rot(3>1) drop(2)

        result::Err(MMap(T) u64)
        return
    }
    drop
    // [len ptr]
    cast(T*) swap
    MMap result::Ok(MMap(T) u64)
}

proc(lang(free)) free(T) [MMap(T)] to [SimpleResult] {
    unpack
    // [ptr len]
    sizeof(T) *
    SYS_MUNMAP rot(3>1) syscall(3)
    cast(s64) 0 swap - cast(u64)
    SimpleResult
}

proc fill(T) [
    MMap(T),
    T
] to [] {
    var val { T }
    var store { MMap(T) }
    val!
    store!

    0 while dup store.length@ < {
        val@ store over(2) insd
        1+
    } drop
}

proc copy(T) [
    MMap(T), // Source
    MMap(T), // Destination
] to [] {
    if xtr(length) over(2) xtrd(length) != {
        "Mismatched length in copy - src: " std::term::ewrite
        swap xtrd(length) std::term::ewrite_ui
        " dst: " std::term::ewrite
        xtrd(length) std::term::ewrite_ui_ln
        exit
    }

    var src { MMap(T) }
    var dst { MMap(T) }
    dst! src!

    0 while dup dst.length@ < {
        dup src swap xtrd
        over dst swap insd
        1+
    } drop
}

proc mmap_file [
    std::io::FD,
    u64 // Protection flags. Must match the FD.
] to [Result(MMap(u8) u64)] {
    over std::fs::fstat
    if xtr(is_ok) not {
        rot(3>1) drop(2)
        result::unwrap_err
        result::Err(MMap(u8) u64)
        return
    }
    result::unwrap_ok

    xtrd(st_size) 0
    // [FD PROT length addr]
    rev(4)
    //[addr length Prot FD]
    unpack
    MAP_PRIVATE swap 0
    SYS_MMAP rot(7>1)
    // We want to keep the length
    over(4)
    rot(8>1)
    syscall(7)

    dup cast(s64)
    // [length ptr errcode]

    if dup 0< {
        // Some kind of failure
        0 swap - cast(u64)
        // Drop the len and pointer
        rev(3) drop(2)
        result::Err(MMap(u8) u64)
    } else {
        drop cast(u8*) swap MMap result::Ok(MMap(u8) u64)
    }
}

