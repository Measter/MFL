strict digraph {
    subgraph passes {
        label = "Passes";

        BuildNames,
        CheckAsserts,
        ConstPropBody,
        DeclareEnums,

        DeclareStructs,
        DefineStructs,
        EvaluatedConstsAsserts,
        IdentResolvedBody,

        IdentResolvedScope,
        IdentResolvedSignature,
        PartiallyTypeResolved,
        StackAndTypeCheckedBody,

        TerminalBlockCheckBody,
        TypeResolvedBody,
        TypeResolvedSignature,
        ValidityCheck
    }

    subgraph items {
        rank = same;
        node [shape = "box"]
        label = "Items";

        Module;
        StructDef;
        Enum;
        Variable;
        FunctionDecl;
        GenericFunction;
        Assert;
        Const;
        Function;
        Primitive;
    }

    ConstPropBody -> StackAndTypeCheckedBody;
    CheckAsserts -> EvaluatedConstsAsserts;
    DeclareEnums -> BuildNames;
    DeclareStructs -> BuildNames;
    DefineStructs -> IdentResolvedSignature;
    DefineStructs -> DeclareStructs;
    EvaluatedConstsAsserts -> ValidityCheck;
    EvaluatedConstsAsserts -> ConstPropBody;
    IdentResolvedBody -> IdentResolvedScope;
    IdentResolvedSignature -> IdentResolvedScope;
    PartiallyTypeResolved -> IdentResolvedBody;
    PartiallyTypeResolved -> IdentResolvedSignature;
    StackAndTypeCheckedBody -> TypeResolvedSignature;
    StackAndTypeCheckedBody -> TypeResolvedBody;
    StackAndTypeCheckedBody -> TerminalBlockCheckBody;
    TypeResolvedBody -> IdentResolvedBody;
    TypeResolvedSignature -> IdentResolvedSignature;

    Module -> BuildNames;
    Module -> ValidityCheck;
    Module -> IdentResolvedScope;
    StructDef -> ValidityCheck;
    StructDef -> IdentResolvedScope;
    StructDef -> DefineStructs;
    Enum -> ValidityCheck;
    Enum -> IdentResolvedScope;
    Enum -> DeclareEnums;
    Variable -> BuildNames;
    Variable -> ValidityCheck;
    Variable -> TypeResolvedSignature;
    FunctionDecl -> BuildNames;
    FunctionDecl -> ValidityCheck;
    FunctionDecl -> TypeResolvedSignature;
    GenericFunction -> ValidityCheck;
    GenericFunction -> PartiallyTypeResolved;
    Assert -> ValidityCheck;
    Assert -> CheckAsserts;
    Const -> ValidityCheck;
    Const -> EvaluatedConstsAsserts;
    Function -> BuildNames;
    Function -> ValidityCheck;
    Function -> ConstPropBody;
    Primitive -> BuildNames;
    Primitive -> IdentResolvedScope;
}