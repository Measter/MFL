strict digraph {
    subgraph passes {
        label = "Passes";

        IdentResolvedSignature;
        IdentResolvedBody;
        DeclareStructs;
        TypeResolvedSignature;
        TypeResolvedBody;
        CyclicRefCheckBody;
        DefineStructs;
        SelfContainingStruct;
        TerminalBlockCheckBody;
        StackAndTypeCheckedBody;
        ConstPropBody;
        EvaluatedConstsAsserts;
        CheckAsserts;
    }

    subgraph items {
        rank = same;
        node [shape = "box"]
        label = "Items";

        Module;
        StructDef;
        Memory;
        GenericFunction;
        Assert;
        Const;
        Function;
    }

    DeclareStructs -> IdentResolvedSignature;
    TypeResolvedSignature -> IdentResolvedSignature;
    TypeResolvedBody -> IdentResolvedBody;
    DefineStructs -> DeclareStructs;
    SelfContainingStruct -> IdentResolvedSignature;
    CyclicRefCheckBody -> IdentResolvedBody;
    TerminalBlockCheckBody -> TypeResolvedBody;
    StackAndTypeCheckedBody -> TypeResolvedSignature;
    StackAndTypeCheckedBody -> TypeResolvedBody;
    StackAndTypeCheckedBody -> TerminalBlockCheckBody;
    ConstPropBody -> StackAndTypeCheckedBody;
    EvaluatedConstsAsserts -> CyclicRefCheckBody;
    EvaluatedConstsAsserts -> ConstPropBody;
    CheckAsserts -> EvaluatedConstsAsserts;

    Module -> IdentResolvedSignature;
    StructDef -> SelfContainingStruct;
    StructDef -> DefineStructs;
    Memory -> TypeResolvedSignature;
    GenericFunction -> IdentResolvedSignature;
    GenericFunction -> IdentResolvedBody;
    Assert -> CheckAsserts;
    Const -> EvaluatedConstsAsserts;
    Function -> ConstPropBody;
}