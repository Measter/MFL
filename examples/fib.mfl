import core::String

proc fibonacci_rec [u64] to [u64] {
    cond { dup 1> {
        dup 1- fibonacci_rec
        swap 2- fibonacci_rec
        +
    }}
}

proc fibonacci_iter [u64] to [u64] {
    0(u64) 1(u64)
    0(u64) while dup over(4) < {
        rot(3>1)
        swap over +
        rot(3<1)
        1+
    }
    rot(4<1) drop(3)
}

proc ord [u8] to [String] {
    100%
    cond {
        11= { "th" }
        12= { "th" }
        13= { "th" }
        else {
            10% cond {
                1= { "st" }
                2= { "nd" }
                3= { "rd" }
                else { drop "th" }
            }
        }
    }
}

proc entry [] to [] {
    0 while dup 30<= {
        dup 1+ dup std::term::write_ui ord std::term::write
        ": " std::term::write
        dup fibonacci_rec std::term::write_ui
        ", " std::term::write
        dup fibonacci_iter std::term::write_ui_ln

        1+
    } drop
}
