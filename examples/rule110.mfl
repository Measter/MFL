import core::String

const N [u32] { 50 }
assert ValidBoardSize { N 3>= }
assert UpdateArrayLengths { N 50 = }

proc render [u8[50]&] to [] {
    // var render_buf u8[N]
    var render_buf: u8[50]

    0 while dup N< {
        if swap over xtr 1= { '*' } else { ' ' }
        over(2) render_buf#!

        swap
        1+
    } drop(2)

    N render_buf cast(u8*) String
    std::term::writeln
}

proc step [u8[50]&] to [] {
    // We keep track of the last two bits so we can modify in place
    0 xtr 1 shl
    swap 1 xtr rot(3<1) or

    1 while dup N 2- < {
        swap 1 shl 7 and // Only want the lower two bits from last run.
        over(2) over(2) 1+ xtrd or

        // Use the three bits as a lookup for the bit in the integer 110.
        dup 110 swap shr 1 and
        rot(4<2) dup(2) rot(6>2) insd

        swap
        1+
    } drop(3)
}

proc entry [] to [] {
    // var buf u8[N]
    var buf: u8[50]

    1 N 2- buf#!

    0 while dup N 2- < {
        buf render
        buf step

        1+
    } drop
}