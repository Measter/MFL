import core::String
import std::term::write_char

struct State {
    ptr u64,
    tape u8[512],
    counter u64,
}

proc entry [] to [] {
    var input String

    "+[>[<-[]>+[>+++>[+++++++++++>][>]-[<]>-]]++++++++++<]>>>>>>----.<<+++.<-..+++.<-.>>>.<<.+++.------.>-.<<+.<."
    input!

    var memory State
    0 memory.ptr!
    0(u64) while dup 512< {
        0 over memory.tape#!
        1+
    } drop
    1 memory.counter!
    assumeinit(memory) // ConstProp is a little dumb.

    0(u64) while dup input.length@ < {
        dup input#@

        cond {
            '>'= { memory.ptr@ 1+ 512% memory.ptr! }
            '<'= { memory.ptr@ 1- 512+ 512% memory.ptr! }
            '.'= { memory.ptr@ memory.tape#@ write_char }
            '+'= { memory.ptr@ memory.tape# dup @ 1+ swap ! }
            '-'= { memory.ptr@ memory.tape# dup @ 1- swap ! }
            '['= {
                cond {
                    memory.ptr@ memory.tape#@ 0= {
                        1 memory.counter!
                        while memory.counter@ 0> {
                            1+
                            dup input#@
                            cond {
                                '['= { memory.counter@ 1+ memory.counter! }
                                ']'= { memory.counter@ 1- memory.counter! }
                                else { drop }
                            }
                        }
                    }
                }
            }
            ']'= {
                cond {
                    memory.ptr@ memory.tape#@ 0!= {
                        1 memory.counter!
                        while memory.counter@ 0> {
                            1-
                            dup input#@
                            cond {
                                ']'= { memory.counter@ 1+ memory.counter! }
                                '['= { memory.counter@ 1- memory.counter! }
                                else { drop }
                            }
                        }
                    }
                }
            }
            else { drop }
        }

        1+
    } drop
}